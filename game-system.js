class GameSystem {
    constructor() {
        this.currentUser = null;
        this.init();
    }

    init() {
        this.loadCurrentUser();
        this.setupDailyRewards();
        this.setupNotifications();
    }

    loadCurrentUser() {
        const userData = sessionStorage.getItem('currentUser');
        if (userData) {
            this.currentUser = JSON.parse(userData);
        }
    }

    // –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    setupDailyRewards() {
        const today = new Date().toDateString();
        const lastRewardDate = localStorage.getItem('lastRewardDate');
        
        if (lastRewardDate !== today) {
            this.showDailyReward();
        }
    }

    showDailyReward() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π
        const reward = this.calculateDailyReward();
        
        const rewardModal = document.createElement('div');
        rewardModal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;
        
        rewardModal.innerHTML = `
            <div style="background: white; padding: 30px; border-radius: 15px; text-align: center; max-width: 400px;">
                <h2>üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞!</h2>
                <div style="font-size: 3em; margin: 20px 0;">${reward.icon}</div>
                <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏: <strong>${reward.amount} ${reward.type}</strong></p>
                <button onclick="this.closest('div').parentElement.remove()" 
                        style="padding: 10px 20px; background: #4caf50; color: white; border: none; border-radius: 5px; cursor: pointer;">
                    –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
                </button>
            </div>
        `;
        
        document.body.appendChild(rewardModal);
        this.giveReward(reward);
        localStorage.setItem('lastRewardDate', new Date().toDateString());
    }

    calculateDailyReward() {
        const rewards = [
            { type: 'coins', icon: 'ü™ô', amount: 50 },
            { type: 'coins', icon: 'ü™ô', amount: 75 },
            { type: 'coins', icon: 'ü™ô', amount: 100 },
            { type: 'experience', icon: '‚≠ê', amount: 25 },
            { type: 'premium', icon: 'üíé', amount: 1 }
        ];
        
        const streak = this.getLoginStreak();
        const baseReward = rewards[Math.floor(Math.random() * rewards.length)];
        
        // –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –≤—Ö–æ–¥–æ–≤
        if (streak > 1) {
            baseReward.amount = Math.floor(baseReward.amount * (1 + streak * 0.1));
        }
        
        return baseReward;
    }

    getLoginStreak() {
        const loginData = JSON.parse(localStorage.getItem('loginStreak') || '{"lastLogin": "", "streak": 0}');
        const today = new Date().toDateString();
        const yesterday = new Date(Date.now() - 86400000).toDateString();
        
        if (loginData.lastLogin === yesterday) {
            loginData.streak = (loginData.streak || 0) + 1;
        } else if (loginData.lastLogin !== today) {
            loginData.streak = 1;
        }
        
        loginData.lastLogin = today;
        localStorage.setItem('loginStreak', JSON.stringify(loginData));
        
        return loginData.streak || 1;
    }

    giveReward(reward) {
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        const userIndex = users.findIndex(u => u.email === this.currentUser?.email);
        
        if (userIndex !== -1) {
            if (reward.type === 'coins') {
                users[userIndex].coins = (users[userIndex].coins || 0) + reward.amount;
            } else if (reward.type === 'experience') {
                users[userIndex].experience = (users[userIndex].experience || 0) + reward.amount;
            } else if (reward.type === 'premium') {
                if (!users[userIndex].premium) users[userIndex].premium = { days: 0 };
                users[userIndex].premium.days += reward.amount;
            }
            
            localStorage.setItem('users', JSON.stringify(users));
            this.showNotification(`–ü–æ–ª—É—á–µ–Ω–æ: ${reward.amount} ${this.getRewardTypeText(reward.type)}`);
        }
    }

    getRewardTypeText(type) {
        const types = {
            'coins': '–º–æ–Ω–µ—Ç',
            'experience': '–æ–ø—ã—Ç–∞', 
            'premium': '–ø—Ä–µ–º–∏—É–º-–¥–Ω–µ–π'
        };
        return types[type] || type;
    }

    // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    setupNotifications() {
        this.checkPendingNotifications();
    }

    showNotification(message, type = 'info', duration = 3000) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${this.getNotificationColor(type)};
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 300px;
            word-wrap: break-word;
        `;
        
        notification.innerHTML = message;
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 300);
        }, duration);
    }

    getNotificationColor(type) {
        const colors = {
            info: '#4caf50',
            warning: '#ff9800',
            error: '#f44336',
            success: '#4caf50'
        };
        return colors[type] || colors.info;
    }

    checkPendingNotifications() {
        const notifications = JSON.parse(localStorage.getItem('pendingNotifications') || '[]');
        if (Array.isArray(notifications)) {
            notifications.forEach(notification => {
                this.showNotification(notification.message, notification.type);
            });
            localStorage.removeItem('pendingNotifications');
        }
    }

    // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievement(achievementId, condition) {
        if (!condition) return;
        
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        const userIndex = users.findIndex(u => u.email === this.currentUser?.email);
        
        if (userIndex !== -1) {
            if (!users[userIndex].achievements) {
                users[userIndex].achievements = [];
            }
            
            if (!users[userIndex].achievements.includes(achievementId)) {
                users[userIndex].achievements.push(achievementId);
                localStorage.setItem('users', JSON.stringify(users));
                
                this.unlockAchievement(achievementId);
            }
        }
    }

    unlockAchievement(achievementId) {
        const achievement = this.getAchievementInfo(achievementId);
        if (achievement) {
            this.showNotification(`üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}`, 'success', 5000);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ–ø—ã—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            this.giveReward({ type: 'experience', amount: 50, icon: '‚≠ê' });
        }
    }

    getAchievementInfo(achievementId) {
        const achievements = {
            'first_login': { name: '–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥', icon: 'üö™' },
            'plant_master': { name: '–ú–∞—Å—Ç–µ—Ä —Ä–∞—Å—Ç–µ–Ω–∏–π', icon: 'üå±' },
            'quiz_expert': { name: '–≠–∫—Å–ø–µ—Ä—Ç –∫–≤–∏–∑–æ–≤', icon: 'üéØ' },
            'friend_collector': { name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –¥—Ä—É–∑–µ–π', icon: 'üë•' },
            'daily_player': { name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–∫', icon: 'üìÖ' }
        };
        
        return achievements[achievementId] || { name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', icon: '‚≠ê' };
    }

    // –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    getWeeklyQuests() {
        const quests = [
            {
                id: 'water_plants',
                title: '–ü–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è',
                description: '–ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ 5 —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö',
                target: 5,
                progress: 0,
                reward: { coins: 100, exp: 50 },
                icon: 'üíß'
            },
            {
                id: 'play_games',
                title: '–°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã',
                description: '–°—ã–≥—Ä–∞–π—Ç–µ 3 –∏–≥—Ä—ã –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ',
                target: 3,
                progress: 0,
                reward: { coins: 75, exp: 25 },
                icon: 'üéÆ'
            },
            {
                id: 'make_friends',
                title: '–ó–∞–≤–µ—Å—Ç–∏ –¥—Ä—É–∑–µ–π',
                description: '–î–æ–±–∞–≤—å—Ç–µ 2 –Ω–æ–≤—ã—Ö –¥—Ä—É–≥–∞',
                target: 2,
                progress: 0,
                reward: { coins: 150, exp: 75 },
                icon: 'üë•'
            }
        ];
        
        return quests;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã
    updateGameStats(gameType, stats) {
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        const userIndex = users.findIndex(u => u.email === this.currentUser?.email);
        
        if (userIndex !== -1) {
            if (!users[userIndex].gameStats) {
                users[userIndex].gameStats = {};
            }
            
            if (!users[userIndex].gameStats[gameType]) {
                users[userIndex].gameStats[gameType] = {};
            }
            
            Object.keys(stats).forEach(stat => {
                users[userIndex].gameStats[gameType][stat] = 
                    (users[userIndex].gameStats[gameType][stat] || 0) + stats[stat];
            });
            
            localStorage.setItem('users', JSON.stringify(users));
        }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    getUserData() {
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        return users.find(u => u.email === this.currentUser?.email) || {};
    }

    updateUserData(updates) {
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        const userIndex = users.findIndex(u => u.email === this.currentUser?.email);
        
        if (userIndex !== -1) {
            users[userIndex] = { ...users[userIndex], ...updates };
            localStorage.setItem('users', JSON.stringify(users));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
            this.currentUser = users[userIndex];
            sessionStorage.setItem('currentUser', JSON.stringify(this.currentUser));
            
            return true;
        }
        return false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
    addCoins(amount) {
        const currentCoins = this.getUserData()?.coins || 0;
        return this.updateUserData({
            coins: currentCoins + amount
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞
    addExperience(amount) {
        const currentExp = this.getUserData()?.experience || 0;
        return this.updateUserData({
            experience: currentExp + amount
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    checkLevelUp() {
        const userData = this.getUserData();
        const experience = userData.experience || 0;
        const currentLevel = userData.level || 1;
        
        const experienceNeeded = currentLevel * 100;
        
        if (experience >= experienceNeeded) {
            const newLevel = currentLevel + 1;
            this.updateUserData({
                level: newLevel,
                experience: experience - experienceNeeded
            });
            
            this.showNotification(`üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${newLevel} —É—Ä–æ–≤–Ω—è!`, 'success', 5000);
            return true;
        }
        return false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saveSettings(settings) {
        const currentSettings = this.getUserData()?.settings || {};
        return this.updateUserData({
            settings: { ...currentSettings, ...settings }
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    getSettings() {
        return this.getUserData()?.settings || {};
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
window.gameSystem = new GameSystem();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
function showDailyReward() {
    window.gameSystem.showDailyReward();
}

function checkAchievement(achievementId, condition) {
    window.gameSystem.checkAchievement(achievementId, condition);
}

function showNotification(message, type = 'info') {
    window.gameSystem.showNotification(message, type);
}

function updateGameStats(gameType, stats) {
    window.gameSystem.updateGameStats(gameType, stats);
}

function addCoins(amount) {
    return window.gameSystem.addCoins(amount);
}

function addExperience(amount) {
    return window.gameSystem.addExperience(amount);
}

function checkLevelUp() {
    return window.gameSystem.checkLevelUp();
}